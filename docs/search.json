[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R training: Liverpool City Region",
    "section": "",
    "text": "Welcome\nThis website hosts the materials for the R training course for the Liverpool City Region. This training workshop was designed and is delivered by Prof. Francisco Rowe and Dr. Patrick Pallantyne.\nThe website is free to use and is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International.\n\n\nContact\n\nProf. Francisco Rowe, Professor in Population Data Science\nf.rowe-gonzalez [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, United Kingdom\n\n\nDr. Patrick Ballantyne, Postdoctoral Researcher in Geographic Data Science\np.ballantyne [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, United Kingdom",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_overview.html",
    "href": "00_overview.html",
    "title": "Overview",
    "section": "",
    "text": "Description\nThis workshop aims to provide R training to analysts in Liverpool City Region Combined Authority. Over four days we will cover a number of topics, which align with the current needs of the analyst team, demonstrating how R can be used for a diverse range of day-to-day analyst tasks.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "00_overview.html#delivery-structure",
    "href": "00_overview.html#delivery-structure",
    "title": "Overview",
    "section": "Delivery & Structure",
    "text": "Delivery & Structure\nThe course will be taught across four days. Each day will run from 10AM to 3PM. Days 1 & 2 will be hosted at the University of Liverpool, and Days 3 & 4 will be hosted at LCRCA.\n\n\n\nDay\nActivity\nInstructor\n\n\n\n\n1\nR Fundamentals\nFrancisco Rowe\n\n\n2\nData visualisation\nPatrick Ballantyne\n\n\n3\nAPIs & Dashboards\nPatrick Ballantyne\n\n\n4\nData modeling\nFrancisco Rowe",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "00_overview.html#before-the-workshop",
    "href": "00_overview.html#before-the-workshop",
    "title": "Overview",
    "section": "Before the workshop",
    "text": "Before the workshop\n\n\n\n\n\n\nImportant\n\n\n\nPlease make sure you download and install the most recent version of R, RStudio and Quarto on the computer that you will be using during the workshop, and install the indicated R packages – see detailed instructions below.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAll three software packages are open and free to use.\n\n\nR\nYou can download R here. Make sure you select the appropriate version for your Operating System: Windows, MacOS (Apple silicon M1/M2 or older intel Macs). For example, if you use a macOS laptop with an M1 processor, click on ‘Download R for macOS’ and then, click the link to download the installer file (.pkg extension for macOS) under the header ‘For Apple silicon (M1/M2) Macs’. You can then open the installer and follow the instructions that you will be prompted with. For Windows users, click on ‘install R for the first time’ and follow the prompts.\nRStudio\nYou will also need to download RStudio Desktop (or simply RStudio), which is an integrated development environment to help you write code in R more easily. To download RStudio, follow this link and scroll down to the section titled ‘All Installers and Tarballs’. Download the appropriate installer file according to your Operating System. Then, open the installer and follow the installation instructions that you will be prompted with.\nQuarto\nDownload Quarto from this website. Quarto is a publishing system that will allow you to open and work on the computational notebooks for the workshop. On ‘Step 1’ on the website, download the version of Quarto that matches your Operating System. Open the installer file, run it and follow the prompts.\nR packages\nOnce you have installed R, you will need to install some R extensions, known as packages, that will be useful for the applications explored in this workshop. The packages you need to install are:\n\ntidyverse\nggthemes\nzoo\nmice\npatchwork\nviridis\ntmap\nsf\nsp\nstringr\nRColorBrewer\nshowtext\nscales\nleaflet\ntmap\nmapdeck\nplotly\nhtmlwidgets\nnomisr\nflexdashboard\n\nTo install the packages, open RStudio. On the console window (normally at the bottom left), write the following command: install.packages(\"name of package\"). Make sure you replace “name of package” by the actual name of the package that you want to install e.g. install.packages(\"tidyverse\"). Then, press enter and repeat this process until you have installed all the packages in the list.\nYou can install all the packages by copying and running the code below:\n\nlist.of.packages.cran &lt;- c(\n   \"tidyverse\",\n   \"ggthemes\",\n   \"zoo\",\n   \"mice\",\n   \"patchwork\",\n   \"viridis\",\n   \"tmap\",\n   \"sf\",\n   \"sp\",\n   \"stringr\",\n   \"RColorBrewer\",\n   \"showtext\",\n   \"scales\",\n   \"leaflet\",\n   \"tmap\",\n   \"mapdeck\",\n   \"plotly\",\n   \"htmlwidgets\",\n   \"nomisr\",\n   \"flexdashboard\"\n)\n\nnew.packages.cran &lt;- list.of.packages.cran[!(list.of.packages.cran %in% installed.packages()[,\"Package\"])]\nif(length(new.packages.cran)) install.packages(new.packages.cran)\n\nfor(i in 1:length(list.of.packages.cran)) {\n  library(list.of.packages.cran[i], character.only = T)\n}\n\nYou can load all the packages by copying and running the code below:\n\ndeps &lt;- list(\n   \"tidyverse\",\n   \"ggthemes\",\n   \"zoo\",\n   \"mice\",\n   \"patchwork\",\n   \"viridis\",\n   \"tmap\",\n   \"sf\",\n   \"sp\",\n   \"stringr\",\n   \"RColorBrewer\",\n   \"showtext\",\n   \"scales\",\n   \"leaflet\",\n   \"tmap\",\n   \"mapdeck\",\n   \"plotly\",\n   \"htmlwidgets\",\n   \"nomisr\",\n   \"flexdashboard\"\n)\n\nfor(lib in deps){library(lib, character.only = TRUE)}\n\n\n\n\n\n\n\nNote\n\n\n\nWe might ask you to install more packages on the day that this workshop is taking place.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nInstructions by email will be sent before the workshop to download the Github repository and data which will be used during the workshop. Please ensure you have downloaded the repository and data before the workshop.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "00_overview.html#during-the-workshop",
    "href": "00_overview.html#during-the-workshop",
    "title": "Overview",
    "section": "During the workshop",
    "text": "During the workshop\nAll the workshop material will be made available on this website which is currently under construction. Further instructions on how to download the material will be given during the workshop.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "01_fundamentals.html",
    "href": "01_fundamentals.html",
    "title": "1  R Fundamentals",
    "section": "",
    "text": "1.1 Learning Objectives\nBy the end of today’s session you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#learning-objectives",
    "href": "01_fundamentals.html#learning-objectives",
    "title": "1  R Fundamentals",
    "section": "",
    "text": "Be familiar with R, RStudio, Quarto and R programming.\nHandle different data types, including numeric, string and factors.\nUnderstand how to create and handle non-geographic and geographic data frames.\nBe familiar with common R packages, including the tidyverse and r-spatial ecosystems.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#plan-for-the-day",
    "href": "01_fundamentals.html#plan-for-the-day",
    "title": "1  R Fundamentals",
    "section": "1.2 Plan for the day",
    "text": "1.2 Plan for the day\n\n\n\nTime\nContent\n\n\n\n\n10.00 - 10.15\nIntroduction\n\n\n10.15 - 10.45\nSetting up & interacting with materials\n\n\n10.45 - 11.30\nR Basics\n\n\n11.30 - 11.50\nBreak\n\n\n11.50 - 12.50\nUsing Quarto documents & Data types\n\n\n12.50 - 13.30\nLunch\n\n\n13.30 - 14.15\nNon-geographic data frames\n\n\n14.15 - 14.45\nGeographic data frames",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#dependencies",
    "href": "01_fundamentals.html#dependencies",
    "title": "1  R Fundamentals",
    "section": "1.3 Dependencies",
    "text": "1.3 Dependencies\n\n# data manipulation\nlibrary(tidyverse)\n# spatial data manipulation\nlibrary(sf)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#introducing-r",
    "href": "01_fundamentals.html#introducing-r",
    "title": "1  R Fundamentals",
    "section": "1.4 Introducing R",
    "text": "1.4 Introducing R\nR is a freely available language and environment for statistical computing and graphics which provides a wide variety of statistical and graphical techniques. It has gained widespread use in academia and industry. R offers a wider array of functionality than a traditional statistics package, is composed of core (base) functionality, and is expandable through libraries hosted on (The Comprehensive R Archive Network (CRAN))[https://cran.r-project.org]. CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of code and documentation for R.\nCommands are sent to R using either the terminal / command line or the R Console which is installed with R on either Windows or OS X. On Linux, there is no equivalent of the console, however, third party solutions exist. On your own machine, R can be installed from here.\nNormally RStudio is used to implement R coding. RStudio is an integrated development environment (IDE) for R and provides a more user-friendly front-end to R than the front-end provided with R.\nTo run R or RStudio, just double click on the R or RStudio icon. Throughout this course, we will be using RStudio:\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you would like to know more about the various features of RStudio, watch this video.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#working-directory",
    "href": "01_fundamentals.html#working-directory",
    "title": "1  R Fundamentals",
    "section": "1.5 Working directory",
    "text": "1.5 Working directory\nBefore we start any analysis, ensure to set the path to the directory where we are working. We have two options to do this.\nOption 1\nOnce you have opened R, you can use the command setwd( ) to set the working directory. For example, replace in the following line the path to the folder where you have placed this file and where the data folder lives.\n\nsetwd(\"\")\n\nYou can check your current working directory by typing:\n\ngetwd()\n\nOption 2\nBefore opening any files in the folder, open the file with the extension *.Rproj. This is a R project and automatically indexes all the files in the folder and subfolders so there is no need to explicitly set the working directory. You can call any files in the R project folder by replacing the working directory with “.”. For instance, let us open a dataset from our subfolder data:\n\nread_csv(\"./data\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#r-scripts-and-quarto-documents",
    "href": "01_fundamentals.html#r-scripts-and-quarto-documents",
    "title": "1  R Fundamentals",
    "section": "1.6 R scripts and Quarto documents",
    "text": "1.6 R scripts and Quarto documents\n\n1.6.1 R script\nAn R script is a series of commands that you can execute at one time and help you save time. R scripts are useful to ensure reproducibility; that is if you want to repeat the same series of steps with the same or different datasets. An R script is a plain text file with R commands.\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo get familiar with good practices in writing your code in R, we recommend the Chapter Workflow: basics and Workflow: scripts and projects from the R in Data Science book by Wickham, Çetinkaya-Rundel, and Grolemund (2023)\n\n\nTo create an R script in RStudio, you need to:\n\nOpen a new script file: File &gt; New File &gt; R Script\nWrite some code on your new script window by typing eg. mtcars\nRun the script. Click anywhere on the line of code, then hit Ctrl + Enter (Windows) or Cmd + Enter (Mac) to run the command or select the code chunk and click run on the right-top corner of your script window. If do that, you should get:\n\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n\nSave the script: File &gt; Save As, select your required destination folder, and enter any filename that you like, provided that it ends with the file extension .R\n\n\n\n\n\n\n\nTask\nOpen and create a basic R Script\n\n\n\n\n\n1.6.2 Quarto Document\nA Quarto Document is based on Markdown technology. It allows to integrate descriptive text and code chunks. Code chunks can be executed independently and interactively, with output visible immediately beneath a code chunk - see Xie, Allaire, and Grolemund (2018). A Quarto Document is an improved version of the original R Notebook. Quarto Document requires a package called Quarto. Quarto does not have a dependency or requirement for R. Quarto is multilingual, beginning with R, Python, Javascript, and Julia. The concept is that Quarto will work even for languages that do not yet exist.\nTo create a Quarto Document, you need to:\n\nOpen a new script file: File &gt; New File &gt; Quarto Document.\nQuarto Documents work in the same way as R Notebooks with small variations. You can find a comprehensive guide on how to use Quarto Documents on the Quarto website.\n\n\n\n\n\n\n\nTask\nOpen, create, preview and render a Quarto Document\n\n\n\nNow that you are familiar with Quarto, we will explore some basic elements:\n\nYAML options\nCode chunks\nPreview\nRendering\n\nTo master Quarto, please read the Quarto Guide page.\n\n\n1.6.3 Using quarto documents\nQuarto documents are very flexible. They can be rendered into different formats, including pdf, html and doc files. They can be used to product reports, articles, briefs, websites, books and more. We can explore how this can be done using some of the templates we have produced and are hosted on our personal Github repository.\nLet us explore the use of Quarto documents by downloading the repository above and examine the various templates available.\n\n\n\n\n\n\nTask\nInclude your name and affiliation on one of the Quarto Document templates. Also try changing the font family.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#help",
    "href": "01_fundamentals.html#help",
    "title": "1  R Fundamentals",
    "section": "1.7 Help",
    "text": "1.7 Help\nYou can use help or ? to ask for details for a specific function:\nhelp(sqrt) #or ?sqrt\nAnd using example provides examples for said function:\n\nexample(geom_map)\n\n\ngem_mp&gt; # First, a made-up example containing a few polygons, to explain\ngem_mp&gt; # how `geom_map()` works. It requires two data frames:\ngem_mp&gt; # One contains the coordinates of each polygon (`positions`), and is\ngem_mp&gt; # provided via the `map` argument. The other contains the\ngem_mp&gt; # other the values associated with each polygon (`values`).  An id\ngem_mp&gt; # variable links the two together.\ngem_mp&gt; \ngem_mp&gt; ids &lt;- factor(c(\"1.1\", \"2.1\", \"1.2\", \"2.2\", \"1.3\", \"2.3\"))\n\ngem_mp&gt; values &lt;- data.frame(\ngem_mp+   id = ids,\ngem_mp+   value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5)\ngem_mp+ )\n\ngem_mp&gt; positions &lt;- data.frame(\ngem_mp+   id = rep(ids, each = 4),\ngem_mp+   x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,\ngem_mp+   0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),\ngem_mp+   y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,\ngem_mp+   2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2)\ngem_mp+ )\n\ngem_mp&gt; ggplot(values) +\ngem_mp+   geom_map(aes(map_id = id), map = positions) +\ngem_mp+   expand_limits(positions)\n\n\n\n\n\n\n\n\n\n\ngem_mp&gt; ggplot(values, aes(fill = value)) +\ngem_mp+   geom_map(aes(map_id = id), map = positions) +\ngem_mp+   expand_limits(positions)\n\n\n\n\n\n\n\n\n\n\ngem_mp&gt; ggplot(values, aes(fill = value)) +\ngem_mp+   geom_map(aes(map_id = id), map = positions) +\ngem_mp+   expand_limits(positions) + ylim(0, 3)\n\n\n\n\n\n\n\n\n\n\ngem_mp&gt; # Now some examples with real maps\ngem_mp&gt; if (require(maps)) {\ngem_mp+ \ngem_mp+   crimes &lt;- data.frame(state = tolower(rownames(USArrests)), USArrests)\ngem_mp+ \ngem_mp+   # Equivalent to crimes %&gt;% tidyr::pivot_longer(Murder:Rape)\ngem_mp+   vars &lt;- lapply(names(crimes)[-1], function(j) {\ngem_mp+     data.frame(state = crimes$state, variable = j, value = crimes[[j]])\ngem_mp+   })\ngem_mp+   crimes_long &lt;- do.call(\"rbind\", vars)\ngem_mp+ \ngem_mp+   states_map &lt;- map_data(\"state\")\ngem_mp+ \ngem_mp+   # without geospatial coordinate system, the resulting plot\ngem_mp+   # looks weird\ngem_mp+   ggplot(crimes, aes(map_id = state)) +\ngem_mp+     geom_map(aes(fill = Murder), map = states_map) +\ngem_mp+     expand_limits(x = states_map$long, y = states_map$lat)\ngem_mp+ \ngem_mp+   # in combination with `coord_sf()` we get an appropriate result\ngem_mp+   ggplot(crimes, aes(map_id = state)) +\ngem_mp+     geom_map(aes(fill = Murder), map = states_map) +\ngem_mp+     # crs = 5070 is a Conus Albers projection for North America,\ngem_mp+     #   see: https://epsg.io/5070\ngem_mp+     # default_crs = 4326 tells coord_sf() that the input map data\ngem_mp+     #   are in longitude-latitude format\ngem_mp+     coord_sf(\ngem_mp+       crs = 5070, default_crs = 4326,\ngem_mp+       xlim = c(-125, -70), ylim = c(25, 52)\ngem_mp+     )\ngem_mp+ \ngem_mp+  ggplot(crimes_long, aes(map_id = state)) +\ngem_mp+    geom_map(aes(fill = value), map = states_map) +\ngem_mp+    coord_sf(\ngem_mp+      crs = 5070, default_crs = 4326,\ngem_mp+      xlim = c(-125, -70), ylim = c(25, 52)\ngem_mp+    ) +\ngem_mp+    facet_wrap(~variable)\ngem_mp+ }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask\nAsk for help for a different function.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#r-data-types",
    "href": "01_fundamentals.html#r-data-types",
    "title": "1  R Fundamentals",
    "section": "1.8 R data types",
    "text": "1.8 R data types\nThere are a number of data types. Four are the most common. In R, numeric is the default type for numbers. It stores all numbers as floating-point numbers (numbers with decimals). This is because most statistical calculations deal with numbers with up to two decimals.\nNumeric\n\nnum &lt;- 4.5 # Decimal values\nclass(num)\n\n[1] \"numeric\"\n\n\nInteger\n\nint &lt;- as.integer(4) # Natural numbers. Note integers are also numerics.\nclass(int)\n\n[1] \"integer\"\n\n\nCharacter\n\ncha &lt;- \"are you enjoying this?\" # text or string. You can also type `as.character(\"are you enjoying this?\")`\nclass(cha)\n\n[1] \"character\"\n\n\nLogical\n\nlog &lt;- 2 &lt; 1 # assigns TRUE or FALSE. In this case, FALSE as 2 is greater than 1\nlog\n\n[1] FALSE\n\nclass(log)\n\n[1] \"logical\"\n\n\nYou can create vectors by concatenating elements:\n\ndata_vector &lt;- c(2, 3, 4, 5, 6)\ndata_vector\n\n[1] 2 3 4 5 6\n\n\n\n\n\n\n\n\nTask\nCreate a variable called income, with the following five respondent values: high, low, low, middle, high.\n\n\n\n\n1.8.1 Factors\nA factor variable assigns a numeric code to each possible category (level) in a variable. Behind the scenes, R stores the variable using these numeric codes to save space and speed up computing. For example, compare the size of a list of 10,000 males and females to a list of 10,000 1s and 0s. At the same time R also saves the category names associated with each numeric code (level). These are used for display purposes.\nFor example, the variable gender, converted to a factor, would be stored as a series of 1s and 2s, where 1 = female and 2 = male; but would be displayed in all outputs using their category labels of female and male.\nDefining a factor\nA factor can be defined by first creating a numeric or character vector; for example:\n\ngender &lt;- c(\"female\", \"male\", \"male\", \"female\", \"female\") # create a gender variable\ngender &lt;- factor(gender) # replace character vector with a factor version\ngender\n\n[1] female male   male   female female\nLevels: female male",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "01_fundamentals.html#data-frames",
    "href": "01_fundamentals.html#data-frames",
    "title": "1  R Fundamentals",
    "section": "1.9 Data frames",
    "text": "1.9 Data frames\n\n1.9.1 Non-geographic data frames\nReading data frames\nCreating data frames\nReferencing data frames\nManipulating data frames\ntidyverse\n\n\n1.9.2 Geographic data frames\nReading geographic data frames\nManipulating geographic data frames\n\n\n\n\nXie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. R Markdown. Chapman; Hall/CRC. https://doi.org/10.1201/9781138359444.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Fundamentals</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html",
    "href": "02_data-visualisation.html",
    "title": "2  Data Visualisation",
    "section": "",
    "text": "2.1 Learning Objectives\nBy the end of today’s session you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html#learning-objectives",
    "href": "02_data-visualisation.html#learning-objectives",
    "title": "2  Data Visualisation",
    "section": "",
    "text": "Produce static visualisations and maps using ggplot\nProduce more advanced static visualisations and maps, using advanced data wrangling techniques\nProduce interactive visualisations\nExplore reporting strategies for visualisation outputs",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html#introducing-todays-datasets",
    "href": "02_data-visualisation.html#introducing-todays-datasets",
    "title": "2  Data Visualisation",
    "section": "2.2 Introducing Today’s Dataset(s)",
    "text": "2.2 Introducing Today’s Dataset(s)\nFor today’s practical, we will be using a couple of different datasets.\nFirstly, we will be using data from the latest UK census - available from NOMIS. In particular, we will be looking at one specific census table; ‘Method of Travel to Work’, which describes the main method of transport people use to travel to work - e.g. by car, by bus, on foot etc.\nFor today’s, we will be using the table of data that is available for Lower Super Output Areas (LSOAs). Let’s go ahead and read the table of data in:\n\n## Read in the ts061 (LSOAs)\nts061 &lt;- read.csv(\"data/census2021-ts061-lsoa.csv\")\n\nLet’s have a look at some of the attributes in the data:\n\n## Examine attributes\nhead(ts061)\n\n  date                 geography geography.code\n1 2021       City of London 001A      E01000001\n2 2021       City of London 001B      E01000002\n3 2021       City of London 001C      E01000003\n4 2021       City of London 001E      E01000005\n5 2021 Barking and Dagenham 016A      E01000006\n6 2021 Barking and Dagenham 015A      E01000007\n  Method.of.travel.to.workplace..Total..All.usual.residents.aged.16.years.and.over.in.employment.the.week.before.the.census\n1                                                                                                                       866\n2                                                                                                                       881\n3                                                                                                                      1000\n4                                                                                                                       496\n5                                                                                                                       888\n6                                                                                                                      1385\n  Method.of.travel.to.workplace..Work.mainly.at.or.from.home\n1                                                        639\n2                                                        676\n3                                                        618\n4                                                        203\n5                                                        192\n6                                                        370\n  Method.of.travel.to.workplace..Underground..metro..light.rail..tram\n1                                                                  35\n2                                                                  31\n3                                                                  74\n4                                                                  69\n5                                                                 205\n6                                                                 358\n  Method.of.travel.to.workplace..Train\n1                                   17\n2                                   10\n3                                   21\n4                                   25\n5                                  104\n6                                  177\n  Method.of.travel.to.workplace..Bus..minibus.or.coach\n1                                                   13\n2                                                   15\n3                                                   26\n4                                                   44\n5                                                   60\n6                                                  117\n  Method.of.travel.to.workplace..Taxi\n1                                   4\n2                                   2\n3                                   4\n4                                   2\n5                                   1\n6                                   8\n  Method.of.travel.to.workplace..Motorcycle..scooter.or.moped\n1                                                           3\n2                                                           1\n3                                                           4\n4                                                           3\n5                                                           5\n6                                                           3\n  Method.of.travel.to.workplace..Driving.a.car.or.van\n1                                                  18\n2                                                  19\n3                                                  24\n4                                                  33\n5                                                 227\n6                                                 220\n  Method.of.travel.to.workplace..Passenger.in.a.car.or.van\n1                                                        0\n2                                                        3\n3                                                        7\n4                                                        1\n5                                                       10\n6                                                       21\n  Method.of.travel.to.workplace..Bicycle Method.of.travel.to.workplace..On.foot\n1                                     24                                    109\n2                                     25                                     92\n3                                     62                                    143\n4                                     18                                     90\n5                                      6                                     61\n6                                     21                                     71\n  Method.of.travel.to.workplace..Other.method.of.travel.to.work\n1                                                             4\n2                                                             7\n3                                                            17\n4                                                             8\n5                                                            17\n6                                                            19\n\n\nBefore we start working with this data, we are going to tidy it up slightly. As you can probably see, the column names are long and messy, and the values in each column are raw counts, instead of percentages.\nMy preferred approach to tidying up data or ‘data wrangling’ is to use the ‘tidyverse’ suite of packages. One of the real benefits of tidyverse are tools called ‘pipes’ (%&gt;%), which are used to emphasise a sequence of actions, linking a series of different data cleaning steps into one nice block of code.\nIn the example below I show how you can use pipes to select some desired columns (by name), rename them, and then convert one a percentage.\n\n## An example of data wrangling with pipes\nexample &lt;- ts061 %&gt;%\n  select(geography.code,\n         Method.of.travel.to.workplace..Total..All.usual.residents.aged.16.years.and.over.in.employment.the.week.before.the.census,\n         Method.of.travel.to.workplace..Work.mainly.at.or.from.home) %&gt;% ## SELECT is used to select specific columns\n  rename(LSOA21CD = geography.code,\n         total = Method.of.travel.to.workplace..Total..All.usual.residents.aged.16.years.and.over.in.employment.the.week.before.the.census,\n         work_from_home = Method.of.travel.to.workplace..Work.mainly.at.or.from.home) %&gt;% ## RENAME is used to rename columns individually\n  mutate(pctWFH = (work_from_home / total) * 100) ## MUTATE is used to create new columns, or modify existing ones \n\n## Inspect\nhead(example)\n\n   LSOA21CD total work_from_home   pctWFH\n1 E01000001   866            639 73.78753\n2 E01000002   881            676 76.73099\n3 E01000003  1000            618 61.80000\n4 E01000005   496            203 40.92742\n5 E01000006   888            192 21.62162\n6 E01000007  1385            370 26.71480\n\n\nOk, so that’s just one example of some steps you might take to tidy up a raw dataset from NOMIS into something a little bit more user friendly. There are lots of additional ‘data wrangling’ steps you might take as an analyst, some of which we will come onto later on, but for now we just need to apply these techniques to ts061 to get it ready for today’s practical, as below.\nIn the code block below, I am going to select columns by index rather than name, which works much better when you have a lot more columns. I am also going to apply the setNames() function to set all column names at once:\n\n## Tidy up ts061\nts061_clean &lt;- ts061 %&gt;%\n  select(3:15) %&gt;% ## selects all columns between index 3 and 15\n  setNames(c(\"LSOA21CD\", \"total\", \"work_from_home\", \"underground_metro\", \"train\", \"bus_minibus_coach\", \n             \"taxi\", \"motorcycle\", \"car_driving\", \"car_passenger\", \"bicycle\", \"foot\", \"other\")) %&gt;% ## applies new column names to those columns\n  mutate(work_from_home = (work_from_home / total) * 100, underground_metro = (underground_metro / total) * 100,\n         train = (train / total) * 100, bus_minibus_coach = (bus_minibus_coach / total) * 100,\n         taxi = (taxi / total) * 100, motorcycle = (motorcycle / total) * 100, \n         car_driving = (car_driving / total) * 100, car_passenger = (car_passenger / total) * 100,\n         bicycle = (bicycle / total) * 100, foot = (foot / total) * 100, other = (other / total) * 100)\n\n## Inspect\nhead(ts061_clean)\n\n   LSOA21CD total work_from_home underground_metro     train bus_minibus_coach\n1 E01000001   866       73.78753          4.041570  1.963048          1.501155\n2 E01000002   881       76.73099          3.518729  1.135074          1.702611\n3 E01000003  1000       61.80000          7.400000  2.100000          2.600000\n4 E01000005   496       40.92742         13.911290  5.040323          8.870968\n5 E01000006   888       21.62162         23.085586 11.711712          6.756757\n6 E01000007  1385       26.71480         25.848375 12.779783          8.447653\n       taxi motorcycle car_driving car_passenger   bicycle      foot     other\n1 0.4618938  0.3464203    2.078522     0.0000000 2.7713626 12.586605 0.4618938\n2 0.2270148  0.1135074    2.156640     0.3405221 2.8376844 10.442679 0.7945516\n3 0.4000000  0.4000000    2.400000     0.7000000 6.2000000 14.300000 1.7000000\n4 0.4032258  0.6048387    6.653226     0.2016129 3.6290323 18.145161 1.6129032\n5 0.1126126  0.5630631   25.563063     1.1261261 0.6756757  6.869369 1.9144144\n6 0.5776173  0.2166065   15.884477     1.5162455 1.5162455  5.126354 1.3718412\n\n\nSo now we have a nice tidy table, where each variable is now a percentage. The final step is to add some additional geographies to the table - in this case we will append on the corresponding Local Authority District for each LSOA.\nThe Open Geography Portal is a great place to find lookup tables for any administrative datasets in the UK. The specific table we have given you provides a lookup between Output Areas (OAs), Lower Super Output Areas (LSOAs), Middle Super Output Areas (MSOAs), Local Enterprise Partnerships (LEPs) and Local Authority Districts (LADs). Let’s read in the lookup table:\n\n## Read in the lookup table\nlookup &lt;- read.csv(\"data/OAs_to_LSOAs_to_MSOAs_to_LEP_to_LAD_(May_2022)_Lookup_in_England.csv\")\n\n## Have a look at the data\nhead(lookup)\n\n     OA21CD  LSOA21CD        LSOA21NM  MSOA21CD       MSOA21NM  LEP21CD1\n1 E00060358 E01011968 Hartlepool 014D E02006909 Hartlepool 014 E37000034\n2 E00060359 E01011968 Hartlepool 014D E02006909 Hartlepool 014 E37000034\n3 E00060360 E01011968 Hartlepool 014D E02006909 Hartlepool 014 E37000034\n4 E00060361 E01011968 Hartlepool 014D E02006909 Hartlepool 014 E37000034\n5 E00060362 E01011970 Hartlepool 001C E02002483 Hartlepool 001 E37000034\n6 E00060363 E01011970 Hartlepool 001C E02002483 Hartlepool 001 E37000034\n     LEP21NM1 LEP21CD2 LEP21NM2   LAD22CD    LAD22NM ObjectId\n1 Tees Valley                   E06000001 Hartlepool        1\n2 Tees Valley                   E06000001 Hartlepool        2\n3 Tees Valley                   E06000001 Hartlepool        3\n4 Tees Valley                   E06000001 Hartlepool        4\n5 Tees Valley                   E06000001 Hartlepool        5\n6 Tees Valley                   E06000001 Hartlepool        6\n\n\nLookup tables often contain more information than you actually need. For example, the one above is structured so that every row is an Output Area (e.g., E00060361), and then the various columns link to other geographies - LSOA, LEP, LAD etc. What we are interested in doing is joining the LSOA-level census data from earlier, with the LAD-specific columns in the lookup table. So, we need to do a couple of things to the lookup table:\n\n## Tidy up the lookup\nlookup_clean &lt;- lookup %&gt;%\n  select(LSOA21CD, LAD22CD, LAD22NM) %&gt;% ## select the LSOA and LAD columns\n  distinct() ## keeps only unique values, i.e., dropping all the additional rows for Output Areas\n\n## Look at the dataset\nhead(lookup_clean)\n\n   LSOA21CD   LAD22CD    LAD22NM\n1 E01011968 E06000001 Hartlepool\n2 E01011970 E06000001 Hartlepool\n3 E01011969 E06000001 Hartlepool\n4 E01011971 E06000001 Hartlepool\n5 E01033465 E06000001 Hartlepool\n6 E01033467 E06000001 Hartlepool\n\n\nThe final step is to attach the Local Authority variables (LAD22CD, LAD22NM) to our main dataset. This can be done in a number of ways, but I have a personal preference for integrating these kind of joins within pipes (as we have done so far).\n\n## Attach the LAD variables to the main dataset\ndb &lt;- ts061_clean %&gt;%\n  inner_join(lookup_clean, by = \"LSOA21CD\")\n\n## Look at the new attributes\ncolnames(db)\n\n [1] \"LSOA21CD\"          \"total\"             \"work_from_home\"   \n [4] \"underground_metro\" \"train\"             \"bus_minibus_coach\"\n [7] \"taxi\"              \"motorcycle\"        \"car_driving\"      \n[10] \"car_passenger\"     \"bicycle\"           \"foot\"             \n[13] \"other\"             \"LAD22CD\"           \"LAD22NM\"          \n\n\nOk, so we have a nice data set that is cleaned and ready for use in today’s practical.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html#static-data-visualisation-easy",
    "href": "02_data-visualisation.html#static-data-visualisation-easy",
    "title": "2  Data Visualisation",
    "section": "2.3 Static Data Visualisation (Easy)",
    "text": "2.3 Static Data Visualisation (Easy)\nFor most of today’s practical, we are going to be using the ggplot2 package to learn how to create nice visualisations in R. It is a really awesome package, has really excellent documentation and the quality of graphics it can produce is (arguably) second-to-none.\nHOWEVER…. Lot’s of people say that ggplot is a tricky syntax to get used to, as it requires a more ‘programmatic’ style of coding (e.g. piping), instead of line-by-line.\n\n2.3.1 The ‘grammar of graphics’\nBefore getting stuck into ggplot, there are a couple of key fundamentals that you need to learn, which comprise something called the ‘grammar of graphics’ The first relates to specifying the specific dataset that you are using to create a plot - it is very easy to do this:\n\n## Specify db as our source of data\nggplot(data = db)\n\n\n\n\n\n\n\n\nAs you can see, ggplot has opened a blank canvas which is going to rely on data from the ‘db’ object to create some form of visualisation.\nThe next fundamental relates to how the information from that source of data is going to be represented, which relies on use of ggplot’s mapping argument - aes(). With this argument, you are able to identify how different variables from your dataset can be visually represented.\nSo for example, let’s say we are interested in looking at the association between two variables in our dataset, plotting one on each axis:\n\n## Set some ggplot aesthetics\nggplot(data = db, aes(x = work_from_home, y = car_driving)) \n\n\n\n\n\n\n\n\nGgplot has now established that those are the two variables you wish to create your visualisation around, and has added axis’ that reflect the underlying distribution of these variables. The final fundamental stage is to introduce ‘geoms’ to our existing plot. Geoms are different types of objects that are used to represent data, including points, bars, lines etc. etc. We will explore lots of these today, but for now, let’s just consider plotting a scatter between the two variables in the plot above.\n\n## Add your first geom\nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point()\n\n\n\n\n\n\n\n\nExcellent! Your first ggplot visualisation is now ready. It doesn’t look the best (right now), but hopefully you have a good understanding of those three fundamental concepts when using ggplot for plotting. So to recap, for every ggplot visualisation you need to be clear on:\n\nWhich dataset is being used to generate the visualisation\nHow you are going to map your variables to generate plot aesthetics (aes)\nThe specific type of geom that you want to use\n\nBefore we move on to exploring other types of data visualisation, let’s think about how we can make this plot better, by changing some of the default options.\n\n## Change some point parameters - size and transparency \nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point(alpha = 0.3, size = 0.35) ## alpha is used to change the transparency of points\n\n\n\n\n\n\n\n\n\n## Add a trend line\nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point(alpha = 0.3, size = 0.35) +\n  geom_smooth(method = \"lm\") ## geom_smooth is used to add an overall trend line to a plot\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n## Change axis titles\nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point(alpha = 0.3, size = 0.35) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Population who work from home (%)\", y = \"Population who drive to work (%)\") ## change the x and y axis labels\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nFor official reporting and academic publications, it is also important cite the data source used to generate the output, which can be done nicely with a caption in the labs() command:\n\n## Cite the data source\nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point(alpha = 0.3, size = 0.35) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Population who work from home (%)\", y = \"Population who drive to work (%)\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") ## set a caption for the plot\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe final tweak you might make to a plot like this is to change the plot theme. Ggplot has a number of themes that can be selected to change the general appearance of a plot. Here is one example:\n\n## Change the plot theme\nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point(alpha = 0.3, size = 0.35) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Population who work from home (%)\", y = \"Population who drive to work (%)\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_bw() ## sets a theme to the plot\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n2.3.2 Independent exercise - Over to you!\nHave a go at making some other modifications to the plot above:\n\nChange the variables that are being plotted on the x and y axis, to look at associations between different modes of travel.\nExplore different themes, and see which one you like most.\n(optional) See if you can figure out how to scale the x and y axis to be between 0 and 100, using the xlim() and ylim() commands.\n\n\n## Patrick's attempt\nggplot(data = db, aes(x = work_from_home, y = car_driving)) +\n  geom_point(alpha = 0.3, size = 0.35) +\n  geom_smooth(method = \"lm\") +\n  xlim(0, 100) +\n  ylim(0, 100) +\n  labs(x = \"Population who work from home (%)\", y = \"Population who drive to work (%)\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n2.3.3 Other static visualisations\nNow that you have a good understanding of how to construct a basic scatter plot using ggplot, and how to change some of the parameters to make your plot more visually appealing, we are going to do a quick overview of some simple visualisation techniques and how to build these in ggplot.\nFirstly, let’s have a look at building a histogram. NOTE: histograms are uni-dimensional, so you only need to set one variable in the aes() command:\n\n## Compute a histogram for one variable.\nggplot(data = db, aes(x = work_from_home)) +\n  geom_histogram(fill = \"orange\") +\n  labs(x = \"Population who work from home (%)\", y = \"Number of LSOAs\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nAlternatively, if you don’t like bar-style histograms, you can swap geom_histogram() for geom_density() to achieve a similar output:\n\n## Different style of histogram\nggplot(data = db, aes(x = work_from_home)) +\n  geom_density(fill = \"orange\") +\n  labs(x = \"Population who work from home (%)\", y = \"Number of LSOAs\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nWe can also very easily plot a bar chart using ggplot. Let’s look at the distribution of LSOAs across LADs.\nBut first, let’s filter our dataset to only look at LSOAs within Liverpool City Region Combined Authority (LCRCA):\n\n## Filter to the six LADs that make up Liverpool City Region Combined Authority\ndb_lcr &lt;- db %&gt;%\n  filter(LAD22NM == \"Liverpool\" | LAD22NM == \"Wirral\" | LAD22NM == \"St. Helens\" | LAD22NM == \"Sefton\" | LAD22NM == \"Knowsley\" | LAD22NM == \"Halton\") ## filter allows you to filter specific values\n\n\n## Plot a bar chart\nggplot(data = db_lcr, aes(x = LAD22NM)) +\n  geom_bar(fill = \"orange\") +\n  labs(x = \"Local Authority District\", y = \"Number of LSOAs\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nBy default, when you have one variable on the x axis and call geom_bar(), ggplot will return a count of the number of rows in each x axis value.\nSometimes, it’s more useful to flip the axis on a plot, especially when you have a lot of categories:\n\n## Flip the axis\nggplot(data = db_lcr, aes(x = LAD22NM)) +\n  geom_bar(fill = \"orange\") +\n  labs(x = \"Local Authority District\", y = \"Number of LSOAs\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() +\n  coord_flip() ## this command swaps the x and y axis\n\n\n\n\n\n\n\n\nFinally, you might be interested in changing how the bars are ordered, going from lowest to highest values.\n\n## Reorder bar plot\nggplot(data = db_lcr, aes(x = fct_infreq(LAD22NM))) + ## Use the fct_infreq to reorder the x axis values\n  geom_bar(fill = \"orange\") +\n  labs(x = \"Local Authority District\", y = \"Number of LSOAs\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\n\nOr from highest to lowest:\n\n## Reorder bar plot\nggplot(data = db_lcr, aes(x = fct_rev(fct_infreq(LAD22NM)))) + ## Use the fct_rev() and fct_infreq() commands to reorder the x axis values\n  geom_bar(fill = \"orange\") +\n  labs(x = \"Local Authority District\", y = \"Number of LSOAs\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\n\nWhat if we wanted to look at the underlying distribution of different commuting methods across the LADs? I really like dotplots as a visualisation technique, and published a paper using one recently.\nLet’s use a dotplot to look at the distribution of walking commuters across the six LADs:\n\n## Examine differences in people who walk to work\nggplot(data = db_lcr, aes(x = LAD22NM, y = foot)) +\n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", stackratio = 0.5, dotsize = .3) +\n  labs(x = \"Local Authority District\", y = \"Population who walk to work(%)\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal()\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\nHowever, as you’re probably thinking, something more advanced might be needed to look at these differences. For example, if you calculated the average percentage of people who walk to work across the six LADs, what interesting story might that tell?\nWe will explore some of these ideas in the next part of the course, where I will show you how to reshape dataframes, and the importance of doing so for producing really powerful visualisations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html#static-data-visualisation-harder",
    "href": "02_data-visualisation.html#static-data-visualisation-harder",
    "title": "2  Data Visualisation",
    "section": "2.4 Static Data Visualisation (Harder)",
    "text": "2.4 Static Data Visualisation (Harder)\nOk, so by now you should understand the basics of producing static visualisations with ggplot. Now, we are going to work towards building some better visualisations, which are not possible to achieve without learning more about reshaping data. If you are familar with pivot tables, its a similar concept!\nSo take our dataset for Liverpool City Region:\n\nhead(db_lcr)\n\n   LSOA21CD total work_from_home underground_metro     train bus_minibus_coach\n1 E01006412   570       11.22807         0.0000000 0.7017544         16.666667\n2 E01006413   524       12.59542         0.0000000 0.9541985         19.656489\n3 E01006414   481        9.97921         0.0000000 0.8316008         20.166320\n4 E01006415   956       18.93305         0.2092050 1.8828452          5.125523\n5 E01006416   588       15.47619         0.1700680 1.1904762          9.353741\n6 E01006417   529       16.82420         0.1890359 2.4574669          5.293006\n      taxi motorcycle car_driving car_passenger  bicycle      foot     other\n1 3.333333  0.3508772    47.71930     10.526316 2.982456  5.964912 0.5263158\n2 3.816794  0.5725191    45.61069      8.206107 1.145038  6.297710 1.1450382\n3 3.534304  0.4158004    47.19335      7.484407 1.663202  8.316008 0.4158004\n4 2.301255  0.3138075    53.97490      6.694561 1.987448  7.322176 1.2552301\n5 2.891156  0.0000000    43.87755      8.843537 4.081633 13.605442 0.5102041\n6 4.914934  0.0000000    47.63705      7.183365 3.024575 11.342155 1.1342155\n    LAD22CD  LAD22NM\n1 E08000011 Knowsley\n2 E08000011 Knowsley\n3 E08000011 Knowsley\n4 E08000011 Knowsley\n5 E08000011 Knowsley\n6 E08000011 Knowsley\n\n\nWe are interested in looking at average commuter behaviours between the six Local Authority Districts that make-up Liverpool City Region Combined Authority. To do so, I’m going to introduce two new commands - group_by() and summarise(). As an example, I’ll show you how to calculate the average percentage of people who walk to work in each LAD:\n\n## Calculate average walking to work in LADs\nwalk &lt;- db_lcr %&gt;%\n  select(LAD22NM, foot) %&gt;%\n  group_by(LAD22NM) %&gt;% ## tells R to calculate a different value for each LAD\n  summarise(foot = mean(foot)) ## tells R to calculate the average % of people who walk to work, per LAD\n\n## Look at the output\nwalk\n\n# A tibble: 6 × 2\n  LAD22NM     foot\n  &lt;chr&gt;      &lt;dbl&gt;\n1 Halton      7.74\n2 Knowsley    7.55\n3 Liverpool   9.82\n4 Sefton      7.21\n5 St. Helens  6.06\n6 Wirral      6.71\n\n\nThen we can produce an interesting visualisation that conveys this story:\n\n## Plot a bar chart\nggplot(data = walk, aes(x = fct_reorder(LAD22NM, -foot), y = foot)) + ## notice how I've set up the new column we calculated as the y axis value\n  geom_bar(stat = \"identity\", fill = \"orange\") + ## this is a slight bug - you need to tell R that each x axis value has it's own y axis value\n  labs(x = \"Local Authority District\", y = \"Population who walk to work (%)\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() \n\n\n\n\n\n\n\n\nNow let’s think about how we can look at differences in commuting patterns between all modes of transport. To do so, we need to calculate the average percentage of people using each mode of transport, in each LAD. Below I show how this can be done using the summarise_all() function, which can be applied when all columns are of the same data type:\n\n## Calculate average use of modes of transport between LADs\nlcr_avg &lt;- db_lcr %&gt;%\n  select(-c(LSOA21CD, total, LAD22CD)) %&gt;% ## first you'll need to drop columns that you don't need anymore\n  group_by(LAD22NM) %&gt;% ## calculates a value for every LAD\n  summarise_all(mean) ## calculates the mean value of every column, for every LAD\n\n## Look at the result\nhead(lcr_avg)\n\n# A tibble: 6 × 12\n  LAD22NM    work_from_home underground_metro train bus_minibus_coach  taxi\n  &lt;chr&gt;               &lt;dbl&gt;             &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt; &lt;dbl&gt;\n1 Halton               23.5            0.0407 0.778              3.68 0.891\n2 Knowsley             20.5            0.0734 2.52               7.29 2.08 \n3 Liverpool            25.4            0.256  2.40              11.4  1.82 \n4 Sefton               27.7            0.149  3.09               4.16 1.40 \n5 St. Helens           22.5            0.0369 1.12               3.75 1.16 \n6 Wirral               26.6            0.239  2.65               4.52 0.958\n# ℹ 6 more variables: motorcycle &lt;dbl&gt;, car_driving &lt;dbl&gt;, car_passenger &lt;dbl&gt;,\n#   bicycle &lt;dbl&gt;, foot &lt;dbl&gt;, other &lt;dbl&gt;\n\n\nNow we need to think about reshaping this dataset. Why?\nWell if you look at the code used to produce the bar plot seen above, you’ll notice you can only put one command for x and y in the aes() parameter. Thus, we need to reshape our data from wide to long, so that all the %s are within one neat column that can be specified as the y axis variable.\nDon’t worry if this doesn’t make too much sense. The more you practice ggplot, the more you will begin to understand why reshaping is an important part of the grammar of graphics:\n\n## Reshape the dataset from wide to long\nlcr_avg &lt;- lcr_avg %&gt;%\n  pivot_longer(!LAD22NM, names_to = \"variable\", values_to = \"avg_pct\") \n\n## Have a look at the output\nhead(lcr_avg)\n\n# A tibble: 6 × 3\n  LAD22NM variable          avg_pct\n  &lt;chr&gt;   &lt;chr&gt;               &lt;dbl&gt;\n1 Halton  work_from_home    23.5   \n2 Halton  underground_metro  0.0407\n3 Halton  train              0.778 \n4 Halton  bus_minibus_coach  3.68  \n5 Halton  taxi               0.891 \n6 Halton  motorcycle         0.410 \n\n\nOk, so now we have all the modes of transport in one column, and a corresponding column which details the % of people who use that mode of transport. Let’s explore some visualisation options here - firstly, a stacked bar chart. Notice the additional parameter set in the aes() command, which tells R to colour the bars by the different modes of transport.\n\n## Stacked bar chart\nggplot(data = lcr_avg, aes(x = LAD22NM, y = avg_pct, fill = variable)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Local Authority District\", y = \"(Average) Population (%)\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() \n\n\n\n\n\n\n\n\nThere are a few things you can do to change the legend title used to represent the different colours, firstly you can set a new legend title using the labs() command:\n\n## Change label\nggplot(data = lcr_avg, aes(x = LAD22NM, y = avg_pct, fill = variable)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Local Authority District\", y = \"(Average) Population (%)\", fill = \"Mode of Transport\",\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() \n\n\n\n\n\n\n\n\nSecond, you can remove it completely:\n\n## Remove label\nggplot(data = lcr_avg, aes(x = LAD22NM, y = avg_pct, fill = variable)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Local Authority District\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() \n\n\n\n\n\n\n\n\nOr reposition the labels to be at the bottom of the plot:\n\n## Change label\nggplot(data = lcr_avg, aes(x = LAD22NM, y = avg_pct, fill = variable)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Local Authority District\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nHowever, I think for something like average populations, it’s better to use an unstacked bar chart, which tells a much clearer story. Furthermore, I would probably swap what is being plotted on the axis, to make the plot even clearer, and flip the axis so you can see the different x axis labels.\n\n## Unstacked bar chart\nggplot(data = lcr_avg, aes(x = variable, y = avg_pct, fill = LAD22NM)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Mode of Transport\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  coord_flip() +\n  theme_minimal() \n\n\n\n\n\n\n\n\n\n2.4.1 Independent exercise - Over to you!\nHave a go at the following:\n\nSee what changes if you ask the summarise_all() command above to calculate median instead of mean.\nHave a go at changing the colour palette used on the plot above, using the scale_fill_brewer() command. Have a look at the documentation for some help with this.\n\nSee if you can figure out how to generate a facet plot, where six individual plots are created, one per LAD, instead of applying different colours for each LAD. Have a look at this tutorial for some support with this.\n\nSOLUTION - EXERCISE 2\n\n## My solution\nggplot(data = lcr_avg, aes(x = variable, y = avg_pct, fill = LAD22NM)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(x = \"Mode of Transport\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  coord_flip() +\n  theme_minimal() \n\n\n\n\n\n\n\n\nSOLUTION - EXERCISE 3\n\n## My solution\nggplot(data = lcr_avg, aes(x = variable, y = avg_pct)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(x = \"Mode of Transport\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  coord_flip() +\n  facet_wrap(~ LAD22NM) +\n  theme_minimal() \n\n\n\n\n\n\n\n\n\n\n2.4.2 For the spatial peeps!\nFinally, before we move on to talk about interactive visualisations, I want to do a quick overview of how you can use R to make maps. There is a whole host of GIS functionality within the R ecosystem (see links below), but one of the nice things about R is that it also works really well as as a cartographic tool.\nLet’s return to our original dataset - LSOA level breakdown of different commuting patterns:\n\n## Inspect\nhead(db)\n\n   LSOA21CD total work_from_home underground_metro     train bus_minibus_coach\n1 E01000001   866       73.78753          4.041570  1.963048          1.501155\n2 E01000002   881       76.73099          3.518729  1.135074          1.702611\n3 E01000003  1000       61.80000          7.400000  2.100000          2.600000\n4 E01000005   496       40.92742         13.911290  5.040323          8.870968\n5 E01000006   888       21.62162         23.085586 11.711712          6.756757\n6 E01000007  1385       26.71480         25.848375 12.779783          8.447653\n       taxi motorcycle car_driving car_passenger   bicycle      foot     other\n1 0.4618938  0.3464203    2.078522     0.0000000 2.7713626 12.586605 0.4618938\n2 0.2270148  0.1135074    2.156640     0.3405221 2.8376844 10.442679 0.7945516\n3 0.4000000  0.4000000    2.400000     0.7000000 6.2000000 14.300000 1.7000000\n4 0.4032258  0.6048387    6.653226     0.2016129 3.6290323 18.145161 1.6129032\n5 0.1126126  0.5630631   25.563063     1.1261261 0.6756757  6.869369 1.9144144\n6 0.5776173  0.2166065   15.884477     1.5162455 1.5162455  5.126354 1.3718412\n    LAD22CD              LAD22NM\n1 E09000001       City of London\n2 E09000001       City of London\n3 E09000001       City of London\n4 E09000001       City of London\n5 E09000002 Barking and Dagenham\n6 E09000002 Barking and Dagenham\n\n\nWe are going to be producing an LSOA-level map for Liverpool City Region Combined Authority, so let’s filter the dataset to the six LADs in LCRCA:\n\n## Filter to LCRCA\nlsoa_lcr &lt;- db %&gt;%\n  filter(LAD22NM == \"Liverpool\" | LAD22NM == \"Wirral\" | LAD22NM == \"St. Helens\" | LAD22NM == \"Sefton\" | LAD22NM == \"Knowsley\" | LAD22NM == \"Halton\")\n\nNow we need a set of LSOA polygons to plot the map with. You covered spatial data formats briefly yesterday with Francisco, so this should be relatively familiar. We have provided a set of LSOAs for Liverpool, which you can read in as below:\n\n## Read in the LSOAs\nlsoa &lt;- st_read(\"data/LCR-LSOA.gpkg\")\n\nReading layer `LCR-LSOA' from data source \n  `/Users/franciscorowe/Dropbox/Francisco/Research/grants/2024/lcr_training/lcr-training/data/LCR-LSOA.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1043 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 318351.7 ymin: 377513.8 xmax: 361791.1 ymax: 422866.5\nProjected CRS: OSGB36 / British National Grid\n\n## Inspect\nhead(lsoa)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 356526.1 ymin: 397294.1 xmax: 359746.3 ymax: 399734.2\nProjected CRS: OSGB36 / British National Grid\n   LSOA21CD   LSOA21NM                               GlobalID Rank. Decile\n1 E01006220 Wigan 035A {6A968831-6B5B-42A7-AFDE-9A2FD2E01FE2}     5      5\n2 E01006225 Wigan 036B {0727B328-8FBD-4074-A887-A40CB89502E2}     9      9\n3 E01006226 Wigan 035E {8A587355-7518-47EF-A60A-6CB117F54F05}     8      8\n4 E01006227 Wigan 038A {CC387BCB-5B3B-4E57-ABA3-4ADB3175D624}     8      8\n5 E01006264 Wigan 036D {89C9660D-5EC9-4498-BEBF-BED018377F41}    10     10\n6 E01006346 Wigan 038E {37DD7E6B-F345-400F-BD76-D8700BFCE534}     7      7\n       Top  Bottom.                           geom\n1 17.47911 42.96657 MULTIPOLYGON (((359223.5 39...\n2 39.40579 27.52150 MULTIPOLYGON (((356696.7 39...\n3 29.37013 36.02265 MULTIPOLYGON (((358079.4 39...\n4 27.95950 37.14953 MULTIPOLYGON (((359464.4 39...\n5 38.51224 26.55367 MULTIPOLYGON (((356526.2 39...\n6 28.96305 36.88915 MULTIPOLYGON (((359465.7 39...\n\n\nThe ‘geom’ column is the most important here - this is what stores the spatial information needed to produce maps. Let’s just extract the LSOA code and the ‘geom’ column.\n\n## Tidy up\nlsoa &lt;- lsoa %&gt;%\n  select(LSOA21CD, geom)\n\nOk, final ‘boring’ step before getting to mapmaking is the joining of our census data with the polygons. As you can probably see from your environment, there is a mismatch between the number of rows in the ‘lsoa’ object and our ‘lsoa_lcr’ object which contains the census data. Thus, when we merge these two datasets together, we want it to return only those rows which match:\n\n## Merge census data with polygons\nlsoa &lt;- merge(lsoa, lsoa_lcr, by = \"LSOA21CD\", all.y = TRUE)\n\nNow we’re ready to make a map! Let’s return to some ggplot fundamentals - remember that you need to set the data, but this time ignore the aesthetics:\n\n## Set the data\nggplot(data = lsoa)\n\n\n\n\n\n\n\n\nNow, to plot a map using ggplot, you need to use a specific geom type that was built for mapping with - geom_sf(). Remember that the data type of our spatial data is called a ‘simple feature’ or ‘sf’:\n\nstr(lsoa)\n\nClasses 'sf' and 'data.frame':  1003 obs. of  16 variables:\n $ LSOA21CD         : chr  \"E01006412\" \"E01006413\" \"E01006414\" \"E01006415\" ...\n $ total            : int  570 524 481 956 588 529 547 755 1337 623 ...\n $ work_from_home   : num  11.23 12.6 9.98 18.93 15.48 ...\n $ underground_metro: num  0 0 0 0.209 0.17 ...\n $ train            : num  0.702 0.954 0.832 1.883 1.19 ...\n $ bus_minibus_coach: num  16.67 19.66 20.17 5.13 9.35 ...\n $ taxi             : num  3.33 3.82 3.53 2.3 2.89 ...\n $ motorcycle       : num  0.351 0.573 0.416 0.314 0 ...\n $ car_driving      : num  47.7 45.6 47.2 54 43.9 ...\n $ car_passenger    : num  10.53 8.21 7.48 6.69 8.84 ...\n $ bicycle          : num  2.98 1.15 1.66 1.99 4.08 ...\n $ foot             : num  5.96 6.3 8.32 7.32 13.61 ...\n $ other            : num  0.526 1.145 0.416 1.255 0.51 ...\n $ LAD22CD          : chr  \"E08000011\" \"E08000011\" \"E08000011\" \"E08000011\" ...\n $ LAD22NM          : chr  \"Knowsley\" \"Knowsley\" \"Knowsley\" \"Knowsley\" ...\n $ geometry         :sfc_MULTIPOLYGON of length 1003; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:407, 1:2] 342810 342810 342809 342808 342779 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:15] \"LSOA21CD\" \"total\" \"work_from_home\" \"underground_metro\" ...\n\n\nGeom_sf works really well with these types of data, so let’s add it to the code above and see what happens:\n\n## Add a polygon geom\nggplot(data = lsoa) +\n  geom_sf()\n\n\n\n\n\n\n\n\nNice! Almost there… now just to tweak the geom_sf command to enable colouring of the polygons based on values. In this example let’s focus on train usage. Notice how aes() is used directly in the geom_sf() command this time instead of in the ggplot() command.\n\n## Plot a choropleth map\nggplot(data = lsoa) +\n  geom_sf(aes(fill = train)) \n\n\n\n\n\n\n\n\nAwesome! Now let’s tweak some of the plotting parameters to make this much more effective:\n\n## Improve the map\nggplot(data = lsoa) +\n  geom_sf(aes(fill = train), color = NA) + ## color = NA removes the borders\n  scale_fill_viridis_c() + ## sets a different colour palette\n  labs(fill = \"Rail Commuters (%)\", caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") + ## some labels\n  theme_minimal()\n\n\n\n\n\n\n\n\nAwesome! You’ve made a really nice map using R with literally only a couple of lines of code. Take a look at Geocomputation with R if you are interested in learning more about how to use R to make maps, or as a GIS. The syntax for different spatial operations (spatial join, intersection etc.) is really intuitive!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html#interactive-data-visualisation",
    "href": "02_data-visualisation.html#interactive-data-visualisation",
    "title": "2  Data Visualisation",
    "section": "2.5 Interactive Data Visualisation",
    "text": "2.5 Interactive Data Visualisation\nOk, so for the final part of today’s practical we are going to explore some options for producing interactive visualisations using R. By interactive we mean producing a visual representation of data that can be explored and analysed directly within the visualisation itself.\nWe will be focusing on two types of interactive visualisation:\n\nInteractive non-spatial - e.g. graphs, charts\nInteractive spatial - e.g. maps\n\n\n2.5.1 Interactive non-spatial visualisations\nThroughout today’s practical, we’ve constructed a large volume of static plots, like bar charts, histograms etc. If you want to turn any of these into something interactive, this is really easy! All you need to do is use ggplotly() function from the ‘plotly’ package, which converts an existing ggplot visualisation into something interactive.\nLet’s test it on one of our earlier plots - the unstacked bar chart.\n\n## Produce the static plot - note it needs to be saved as an object\np &lt;- ggplot(data = lcr_avg, aes(x = variable, y = avg_pct, fill = LAD22NM)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(x = \"Mode of Transport\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  coord_flip() +\n  theme_minimal() \n\n## Produce the interactive version\nggplotly(p)\n\n\n\n\n\nHow easy was that!\nI think this works really well when you have quite a lot of information, and it’s difficult to unpack exactly the individual trends. A good example of this was the stacked bar chart we produced earlier:\n\n## Produce the stacked bar chart again\np2 &lt;- ggplot(data = lcr_avg, aes(x = LAD22NM, y = avg_pct, fill = variable)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Local Authority District\", y = \"(Average) Population (%)\", fill = NULL,\n       caption = \"Data: UK Census (2021) - 'Method of travel to work' (ts061)\") +\n  theme_minimal() \n\n## Produce the interactive version\nggplotly(p2)\n\n\n\n\n\nThere are lots of ways you can use an interactive plot like this. One is to utilise the Quarto formats we have introduced in this course to produce reports, where you embed the interactive visualisation within the report.\nAlternatively, you can export the interactive chart to both .html and .png formats. To save as a .html file, you need the htmlwidgets package to be installed.\nLet’s export the stacked bar chart as a .html file:\n\n## First assign the interactive plot to a new object\ni &lt;- ggplotly(p2)\n\n## Save the file\nsaveWidget(i, file = \"figs/Stack.html\")\n\n\n\n2.5.2 Independent exercise - Over to you!\n\nSee if you can produce interactive versions of some of the other visualisations we have made today.\nCheck you know how to save these to .html files\n(optional) Start tweaking what appears in the pop-ups on the interactive visualisations - you need to think about what data is being displayed from the original data frame, and how you might modify the original data frame to make the pop ups better.\n\n\n\n2.5.3 Interactive spatial visualisations\nIf you want to turn the ggplot map we made earlier into something interactive, the easiest option is to actually use a different package - tmap. Tmap has a really nice hookup to leaflet, which makes it really easy to plot maps interactively.\nTo reproduce the map above in tmap, here’s the code:\n\n## Choropleth map in tmap\ntm_shape(lsoa) +\n  tm_fill(col = \"train\", title = \"Rail Commuters (%)\", palette = \"viridis\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\n\n\n\nTo make this interactive, you need to change the default plotting mode in tmap:\nReplot the map and see what happens:\n\n## Choropleth map in tmap (interactive)\ntm_shape(lsoa) +\n  tm_fill(col = \"train\", title = \"Rail Commuters (%)\", palette = \"viridis\", alpha = 0.7) + ## Lower the transparency, so you can see the basemap\n  tm_layout(frame = FALSE)\n\n\n\n\n\nTo save this interactive map to a .html file, you just need to save the interactive map as an object, and then run the tmap_save() command to export to a .html.\n\n## Save the map to an object\np3 &lt;- tm_shape(lsoa) +\n  tm_fill(col = \"train\", title = \"Rail Commuters (%)\", palette = \"viridis\", alpha = 0.7) + ## Lower the transparency, so you can see the basemap\n  tm_layout(frame = FALSE)\n\n## Save as a .html\ntmap_save(p3, \"figs/Map.html\")\n\nInteractive map saved to figs/Map.html\n\n\n\n\n2.5.4 Independent exercise - Over to you!\n\nHave a go at mapping different variables, by playing with the col() command in tmap.\nThink about what additional spatial information you might add to a map like this to tell a good story - chat to Patrick. Clue: how might data on transport infrastructure help to explain differences in public transport usage.\n(optional) Download another spatial dataset, and have a go at trying to produce a map with it.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "02_data-visualisation.html#additional-resources",
    "href": "02_data-visualisation.html#additional-resources",
    "title": "2  Data Visualisation",
    "section": "2.6 Additional Resources",
    "text": "2.6 Additional Resources\nAs I said at the beginning of the practical, ggplot really benefits from a great community which contributes lots of documentation and examples about how to use ggplot for different applications.\nA really cool resource is this - Top 50 ggplot2 visualisations. It has lots of examples of different visualisation techniques that ggplot can be used for.\nThis book is really awesome too - R for Data Science. It was written by Hadley Wickham, who introduced ggplot and the tidyverse to the R world.\nIf interested in using R as a GIS, this free online book is excellent - Geocomputation with R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualisation</span>"
    ]
  },
  {
    "objectID": "04_data-modeling.html",
    "href": "04_data-modeling.html",
    "title": "3  Data modeling",
    "section": "",
    "text": "3.1 Linear regression",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data modeling</span>"
    ]
  },
  {
    "objectID": "04_data-modeling.html#linear-regression",
    "href": "04_data-modeling.html#linear-regression",
    "title": "3  Data modeling",
    "section": "",
    "text": "estimation\ninterpretation / CIs, p-values, etc.\ndummy variables\nmulticollinearity",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data modeling</span>"
    ]
  },
  {
    "objectID": "04_data-modeling.html#time-series-data-modelling",
    "href": "04_data-modeling.html#time-series-data-modelling",
    "title": "3  Data modeling",
    "section": "3.2 Time series data modelling",
    "text": "3.2 Time series data modelling\n\nautoregressive (AR)\nseasonality / integration / diffencing (I)\nmoving average (MA)\nARIMA\nARIMAX (adding Xs)\nVAR???",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data modeling</span>"
    ]
  },
  {
    "objectID": "05_data-description.html",
    "href": "05_data-description.html",
    "title": "4  Data",
    "section": "",
    "text": "4.1 Data 1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "05_data-description.html#data-2",
    "href": "05_data-description.html#data-2",
    "title": "4  Data",
    "section": "4.2 Data 2",
    "text": "4.2 Data 2",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "05_data-description.html#data-3",
    "href": "05_data-description.html#data-3",
    "title": "4  Data",
    "section": "4.3 Data 3",
    "text": "4.3 Data 3",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Xie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. R\nMarkdown. Chapman; Hall/CRC. https://doi.org/10.1201/9781138359444.",
    "crumbs": [
      "References"
    ]
  }
]